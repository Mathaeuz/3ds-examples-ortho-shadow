; PICA200 Shadow mapped vertex shader
; SHADOW PASS
; outpos is converted to depth information
; GL (REGULAR) PASS
; The depth map (Shadow2D texture) has to be suplied through texture unit 0
; So texcoord0 and texcoord0w are UV and depth respectively, calculated from the light's perspective

; Uniforms
.fvec projection[4], modelView[4], light[4]

; Constants
.constf myconst(0.0, 1.0, 2.0, 0.5)
.alias  zeros myconst.xxxx ; Vector full of zeros
.alias  ones  myconst.yyyy ; Vector full of ones
.alias  half  myconst.wwww
.alias  twos  myconst.zzzz

; Outputs
.out outpos position
.out outtc0 texcoord0
.out outtc0w texcoord0w
.out outtc1 texcoord1
.out outclr color
.out outview view
.out outnq normalquat

; Inputs (defined as aliases for convenience)
.alias inpos v0
.alias intex v1
.alias innrm v2

.proc main
	; Force the w component of inpos to be 1.0
	mov r0.xyz, inpos
	mov r0.w,   ones

	; r1 = modelView * inpos
	dp4 r1.x, modelView[0], r0
	dp4 r1.y, modelView[1], r0
	dp4 r1.z, modelView[2], r0
	dp4 r1.w, modelView[3], r0

	; outview = -r1
	mov outview, -r1

	; outpos = projection * r1
	dp4 outpos.x, projection[0], r1
	dp4 outpos.y, projection[1], r1
	dp4 outpos.z, projection[2], r1
	dp4 outpos.w, projection[3], r1

	; texcoord0 from light projection in r2
	; r2 = light * r1
	dp4 r2.x, light[0], r1
	dp4 r2.y, light[1], r1
	dp4 r2.z, light[2], r1
	dp4 r2.w, light[3], r1

	rcp r3.x, r2.x
	rcp r3.y, r2.y
	rcp r3.z, r2.z
	rcp r3.w, r2.w
	; texcoord0 = XY * 0.5 + 0.5
	mul r2.xy, r3.ww, r2
	mul r2.xy, half, r2
	add r2.xy, half, r2
	; texcoord0w = 1 + Z, where Z is depth from -1 (closer) to 0 (further)
	add r2.z, ones.z, r2.z
	mov outtc0, r2.xy
	mov outtc0w, r2.z
	mov outtc1, r2.xy

	; outtc1 = intex
	;mov outtc1, intex

	; Transform the normal vector with the modelView matrix
	dp3 r14.x, modelView[0], innrm
	dp3 r14.y, modelView[1], innrm
	dp3 r14.z, modelView[2], innrm
	dp3 r6.x, r14, r14
	rsq r6.x, r6.x
	mul r14.xyz, r14.xyz, r6.x

	mov r0, myconst.yxxx
	add r4, ones, r14.z
	mul r4, half, r4
	cmp zeros, ge, ge, r4.x
	rsq r4, r4.x
	mul r5, half, r14
	jmpc cmp.x, degenerate

	rcp r0.z, r4.x
	mul r0.xy, r5, r4

degenerate:
	mov outnq, r0
	mov outclr, ones

	; We're finished
	end
.end
